{
	"info": {
		"_postman_id": "df706efe-b9d9-41a6-bd24-8c88dd62b9c8",
		"name": "Star Wars Api dev",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Examples1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct responce format JSON\r",
							"pm.test(\"Correct responce format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"//2. We have all declared fields in the response\r",
							"pm.test(\"We have all declared fields in the response\", function(){\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");//если ввести пипл1 то зафейлится так как такого нет\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"//3. Field values are not NULL\r",
							"pm.test(\"Field values are not NULL\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.vehicles).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);\r",
							"});\r",
							"//4. Field values are not empty\r",
							"pm.test(\"Field values are not empty\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\");\r",
							"});\r",
							"//5. Field values have specific value\r",
							"pm.test(\"Field values have specific value\", function() {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							"});\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//7. Status message is OK\r",
							"pm.test(\"Status message is OK\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//8. Response time is less then 1000ms\r",
							"pm.test(\"Response time is less then 1000ms\", function() {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"//9. There is a specific header Content-Type\r",
							"pm.test(\"There is a specific header Content-Type\", function() {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"//10. There is a specific header with a specific value\r",
							"pm.test(\"There is a specific header with a specific value\", function() {\r",
							"    pm.response.to.be.header(\"Content-Type\",\"application/json\");\r",
							"});\r",
							"//11. Cookie exsist\r",
							"pm.test(\"Cookie exsist\", function() {\r",
							"  pm.cookies.has(\"\");// Нужно вставить название куки если есть, сейчас пусто\r",
							"});\r",
							"//12 Cookie has value\r",
							"pm.test(\"Cookie has value\", function() {\r",
							"    try {\r",
							"            var mycookie = pm.cookies.get(\"\");//вставить название куки\r",
							"            console.log(mycookie);\r",
							"    } catch(e) {\r",
							"        console.log(\"Some Problen->\" + e)\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "2 example scheme",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\",\"homeworld\",\"films\", \"species\",\"vehicles\",\"starships\"],\r",
							"    \"property\": {\r",
							"        \"name\": {\"type\":\"string\"},\r",
							"        \"homeworld\": {\"type\":\"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"        \"species\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"        \"starships\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"        },\r",
							"    }\r",
							"};\r",
							"pm.test(\"Body is correct\",function() {\r",
							"    pm.expect(tv4.validate(data,schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "1 example scheme",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    // specify the type of object\r",
							"    \"type\" : \"object\",\r",
							"    // specify requires properties\r",
							"    \"required\": [\"people\",\"planets\",\"films\",\"species\",\"vehicles\",\"starships\"],\r",
							"    // describe properties\r",
							"    \"properties\": {\r",
							"         \"people\": {\"type\":\"string\"},\r",
							"         \"planets\": {\"type\":\"string\"},\r",
							"         \"films\": {\"type\":\"string\"},\r",
							"         \"species\": {\"type\":\"string\"},\r",
							"         \"vehicles\": {\"type\":\"string\"},\r",
							"         \"starships\": {\"type\":\"string\"},\r",
							"    }\r",
							"};\r",
							"pm.test(\"Body is correct\", function() {\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		}
	]
}